
pipeline GoodsPipeline {

    DevicesZipExtractor
	    -> ZipArchiveInterpreter
        -> DeviceDataPicker
        -> DevicesTextFileInterpreter
		-> DevicesCSVInterpreter
		-> DeleteColumns
		-> RenameHeaders
	   	-> DevicesTableInterpreter
        -> CelsiusToFahrenheitTransformer
        -> CelsiusToFahrenheitTransformerBattery
		-> TemperatureLoader;

	block DevicesZipExtractor oftype HttpExtractor {
		url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
	}
    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }
    
    block DeviceDataPicker oftype FilePicker {
        path: "/data.csv";
    }
	block DevicesTextFileInterpreter oftype TextFileInterpreter { }

	block DevicesCSVInterpreter oftype CSVInterpreter {
		enclosing: '';
		delimiter: ";";
	}
	

	block DeleteColumns oftype ColumnDeleter {
	delete: [
		column F,
		column G,
		column H,
		column I,
	];
	}
	
	block RenameHeaders oftype CellWriter {
	at: range A1:F1;
	write: ['id', 'producer', 'model', 'month', 'temperature', 'battery_temperature'];
	}

	
	block DevicesTableInterpreter oftype TableInterpreter {
		header: true;
		columns: [
			"id" oftype PositiveInteger, // PositiveInteger 
			"producer" oftype text,
			"model" oftype text,
			"month" oftype Month,
			"temperature" oftype decimal,
			"battery_temperature" oftype decimal
		];
	}

	
	valuetype PositiveInteger oftype integer {
		constraints: [ Positive ];
	}
	constraint Positive oftype RangeConstraint {
		lowerBound: 0; //oder 1?
	}
	
	valuetype Month oftype integer {
		constraints: [ MonthCapitalized ];
	}
	constraint MonthCapitalized oftype RangeConstraint {
		lowerBound: 1;
        upperBound: 12;
        upperBoundInclusive: true;
	}
    
    transform CelsiusToFahrenheit {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }
    block CelsiusToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }
    block CelsiusToFahrenheitTransformerBattery oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }
	
	block TemperatureLoader oftype SQLiteLoader {
		table: "temperatures";
		file: "./temperatures.sqlite";
	} 
}